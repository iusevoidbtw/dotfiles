# keybinds to create new file and new directory respectively
map b push :!$EDITOR<space>""<left>
map B push :!mkdir<space>""<left>

# interpreter for shell commands
set shell sh

# exit on error (-e) and throw errors for unset variables (-u) in shell commands
set shellopts '-eu'

# set internal field separator to \n for shell commands
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use dim attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# make sure trash folder exists
%mkdir -p ~/.trash

# define a trash command
cmd trash %set -f; mv $fx ~/.trash

map <delete> trash
map <s-delete> delete

# define command to extract archive / tarball with the correct command
cmd extract ${{
	set -f
	case $f in
		*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
		*.tar.gz|*.tgz) tar xzvf $f;;
		*.tar.xz|*.txz) tar xJvf $f;;
		*.zip) unzip $f;;
		*.rar) unrar x $f;;
		*.7z) 7z x $f;;
	esac
}}

# define command to archive selected file(s) with tar and gunzip
cmd tar ${{
	set -f
	mkdir $1
	cp -r $fx $1
	tar czf $1.tar.gz $1
	rm -rf $1
}}

# define command to selected files(s) with zip
cmd zip ${{
	set -f
	mkdir $1
	cp -r $fx $1
	zip -r $1.zip $1
	rm -rf $1
}}
